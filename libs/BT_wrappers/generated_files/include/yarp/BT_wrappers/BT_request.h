/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_BT_REQUEST_H
#define YARP_THRIFT_GENERATOR_SERVICE_BT_REQUEST_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <yarp/BT_wrappers/ActionID.h>
#include <yarp/BT_wrappers/ReturnStatus.h>
#include <yarp/os/Property.h>

namespace yarp {
namespace BT_wrappers {

class BT_request :
        public yarp::os::Wire
{
public:
    // Constructor
    BT_request();

    /**
     * request_status  Get the status of the action on the server side.
     * target        The target whose state is required
     *                      NOTE: in case the Tick uses a target, then the request_status action MUST use the same target.
     *                      Ex.: For navigation target may be the destination location name.
     * return              The enum indicating the status of the action on the server side.
     */
    virtual ReturnStatus request_status(const ActionID& target);

    /**
     * request_tick  Send a Tick request to the server, along with its parameters.
     * target        The ActionID is a small structure useful to uniquely identify the client requesting the action,
     *                      so that the server can safely handle multiple clients at the same time.
     *                      Optional in case the action has no targets.
     * params        Any addictional parameter the server may require to perform the action.
     *                      Ex.: For navigation target may be the destination location name;
     *                      the params may contain the max speed.
     * return               The enum indicating the status of the action on the server side.
     */
    virtual ReturnStatus request_tick(const ActionID& target, const yarp::os::Property& params = {  });

    /**
     * request_halt  Send a Halt request to the server, along with its parameters.
     * target        The ActionID is a small structure useful to uniquely identify the client requesting the action,
     *                      so that the server can safely handle multiple clients at the same time.
     *                      Optional in case the action has no targets.
     *                      NOTE: in case the Tick uses a target, then the Halt action MUST use the same target to stop it.
     * params        Any addictional parameter the server may require to perform the action.
     *                      Ex.: For navigation target may be the destination location name;
     *                      the params may contain the max deceleration to apply.
     * return              The enum indicating the status of the action on the server side.
     */
    virtual ReturnStatus request_halt(const ActionID& target, const yarp::os::Property& params = {  });

    /**
     *  request_initialize  Hook for an initialization callback. The client can ask the action server to perform
     *                      an initialization step.
     * return              true if initialization was successful, false otherwise
     */
    virtual bool request_initialize();

    /**
     * request_terminate  The client notifies the server to close, in order to perform a graceful shutdown.
     * return              true if the call was successful, false otherwise
     */
    virtual bool request_terminate();

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

} // namespace yarp
} // namespace BT_wrappers

#endif // YARP_THRIFT_GENERATOR_SERVICE_BT_REQUEST_H
