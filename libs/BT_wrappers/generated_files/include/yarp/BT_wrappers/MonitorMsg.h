/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_MONITORMSG_H
#define YARP_THRIFT_GENERATOR_STRUCT_MONITORMSG_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace yarp {
namespace BT_wrappers {

class MonitorMsg :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    std::string skill;
    std::string target;
    std::string event;

    // Default constructor
    MonitorMsg();

    // Constructor with field values
    MonitorMsg(const std::string& skill,
               const std::string& target,
               const std::string& event);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<MonitorMsg> unwrapped;

    class Editor :
            public yarp::os::Wire,
            public yarp::os::PortWriter
    {
    public:
        // Editor: default constructor
        Editor();

        // Editor: constructor with base class
        Editor(MonitorMsg& obj);

        // Editor: destructor
        ~Editor() override;

        // Editor: Deleted constructors and operator=
        Editor(const Editor& rhs) = delete;
        Editor(Editor&& rhs) = delete;
        Editor& operator=(const Editor& rhs) = delete;
        Editor& operator=(Editor&& rhs) = delete;

        // Editor: edit
        bool edit(MonitorMsg& obj, bool dirty = true);

        // Editor: validity check
        bool isValid() const;

        // Editor: state
        MonitorMsg& state();

        // Editor: start editing
        void start_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use start_editing() instead")
        void begin()
        {
            start_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: stop editing
        void stop_editing();

#ifndef YARP_NO_DEPRECATED // Since YARP 3.2
        YARP_DEPRECATED_MSG("Use stop_editing() instead")
        void end()
        {
            stop_editing();
        }
#endif // YARP_NO_DEPRECATED

        // Editor: skill field
        void set_skill(const std::string& skill);
        const std::string& get_skill() const;
        virtual bool will_set_skill();
        virtual bool did_set_skill();

        // Editor: target field
        void set_target(const std::string& target);
        const std::string& get_target() const;
        virtual bool will_set_target();
        virtual bool did_set_target();

        // Editor: event field
        void set_event(const std::string& event);
        const std::string& get_event() const;
        virtual bool will_set_event();
        virtual bool did_set_event();

        // Editor: clean
        void clean();

        // Editor: read
        bool read(yarp::os::ConnectionReader& connection) override;

        // Editor: write
        bool write(yarp::os::ConnectionWriter& connection) const override;

    private:
        // Editor: state
        MonitorMsg* obj;
        bool obj_owned;
        int group;

        // Editor: dirty variables
        bool is_dirty;
        bool is_dirty_skill;
        bool is_dirty_target;
        bool is_dirty_event;
        int dirty_count;

        // Editor: send if possible
        void communicate();

        // Editor: mark dirty overall
        void mark_dirty();

        // Editor: mark dirty single fields
        void mark_dirty_skill();
        void mark_dirty_target();
        void mark_dirty_event();

        // Editor: dirty_flags
        void dirty_flags(bool flag);
    };

private:
    // read/write skill field
    bool read_skill(yarp::os::idl::WireReader& reader);
    bool write_skill(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_skill(yarp::os::idl::WireReader& reader);
    bool nested_write_skill(const yarp::os::idl::WireWriter& writer) const;

    // read/write target field
    bool read_target(yarp::os::idl::WireReader& reader);
    bool write_target(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_target(yarp::os::idl::WireReader& reader);
    bool nested_write_target(const yarp::os::idl::WireWriter& writer) const;

    // read/write event field
    bool read_event(yarp::os::idl::WireReader& reader);
    bool write_event(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_event(yarp::os::idl::WireReader& reader);
    bool nested_write_event(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace yarp
} // namespace BT_wrappers

#endif // YARP_THRIFT_GENERATOR_STRUCT_MONITORMSG_H
