/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/BT_wrappers/BlackBoardWrapper.h>

#include <yarp/os/idl/WireTypes.h>

namespace yarp {
namespace BT_wrappers {

class BlackBoardWrapper_getData_helper :
        public yarp::os::Portable
{
public:
    explicit BlackBoardWrapper_getData_helper(const std::string& target);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_target;

    thread_local static yarp::os::Property s_return_helper;
};

thread_local yarp::os::Property BlackBoardWrapper_getData_helper::s_return_helper = {};

BlackBoardWrapper_getData_helper::BlackBoardWrapper_getData_helper(const std::string& target) :
        m_target{target}
{
}

bool BlackBoardWrapper_getData_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("getData", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_target)) {
        return false;
    }
    return true;
}

bool BlackBoardWrapper_getData_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class BlackBoardWrapper_setData_helper :
        public yarp::os::Portable
{
public:
    explicit BlackBoardWrapper_setData_helper(const std::string& target, const yarp::os::Property& datum);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_target;
    yarp::os::Property m_datum;

    thread_local static bool s_return_helper;
};

thread_local bool BlackBoardWrapper_setData_helper::s_return_helper = {};

BlackBoardWrapper_setData_helper::BlackBoardWrapper_setData_helper(const std::string& target, const yarp::os::Property& datum) :
        m_target{target},
        m_datum{datum}
{
    s_return_helper = {};
}

bool BlackBoardWrapper_setData_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("setData", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_target)) {
        return false;
    }
    if (!writer.write(m_datum)) {
        return false;
    }
    return true;
}

bool BlackBoardWrapper_setData_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class BlackBoardWrapper_clearData_helper :
        public yarp::os::Portable
{
public:
    explicit BlackBoardWrapper_clearData_helper(const std::string& target);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    std::string m_target;
};

BlackBoardWrapper_clearData_helper::BlackBoardWrapper_clearData_helper(const std::string& target) :
        m_target{target}
{
}

bool BlackBoardWrapper_clearData_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("clearData", 1, 1)) {
        return false;
    }
    if (!writer.writeString(m_target)) {
        return false;
    }
    return true;
}

bool BlackBoardWrapper_clearData_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class BlackBoardWrapper_clearAll_helper :
        public yarp::os::Portable
{
public:
    explicit BlackBoardWrapper_clearAll_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;
};

BlackBoardWrapper_clearAll_helper::BlackBoardWrapper_clearAll_helper()
{
}

bool BlackBoardWrapper_clearAll_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("clearAll", 1, 1)) {
        return false;
    }
    return true;
}

bool BlackBoardWrapper_clearAll_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class BlackBoardWrapper_resetData_helper :
        public yarp::os::Portable
{
public:
    explicit BlackBoardWrapper_resetData_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;
};

BlackBoardWrapper_resetData_helper::BlackBoardWrapper_resetData_helper()
{
}

bool BlackBoardWrapper_resetData_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("resetData", 1, 1)) {
        return false;
    }
    return true;
}

bool BlackBoardWrapper_resetData_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    return true;
}

class BlackBoardWrapper_listTarget_helper :
        public yarp::os::Portable
{
public:
    explicit BlackBoardWrapper_listTarget_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static std::vector<std::string> s_return_helper;
};

thread_local std::vector<std::string> BlackBoardWrapper_listTarget_helper::s_return_helper = {};

BlackBoardWrapper_listTarget_helper::BlackBoardWrapper_listTarget_helper()
{
}

bool BlackBoardWrapper_listTarget_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("listTarget", 1, 1)) {
        return false;
    }
    return true;
}

bool BlackBoardWrapper_listTarget_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    s_return_helper.clear();
    uint32_t _size0;
    yarp::os::idl::WireState _etype3;
    reader.readListBegin(_etype3, _size0);
    s_return_helper.resize(_size0);
    for (auto& _elem4 : s_return_helper) {
        if (!reader.readString(_elem4)) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// Constructor
BlackBoardWrapper::BlackBoardWrapper()
{
    yarp().setOwner(*this);
}

yarp::os::Property BlackBoardWrapper::getData(const std::string& target)
{
    BlackBoardWrapper_getData_helper helper{target};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "yarp::os::Property BlackBoardWrapper::getData(const std::string& target)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BlackBoardWrapper_getData_helper::s_return_helper : yarp::os::Property{};
}

bool BlackBoardWrapper::setData(const std::string& target, const yarp::os::Property& datum)
{
    BlackBoardWrapper_setData_helper helper{target, datum};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool BlackBoardWrapper::setData(const std::string& target, const yarp::os::Property& datum)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BlackBoardWrapper_setData_helper::s_return_helper : bool{};
}

void BlackBoardWrapper::clearData(const std::string& target)
{
    BlackBoardWrapper_clearData_helper helper{target};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void BlackBoardWrapper::clearData(const std::string& target)");
    }
    yarp().write(helper, helper);
}

void BlackBoardWrapper::clearAll()
{
    BlackBoardWrapper_clearAll_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void BlackBoardWrapper::clearAll()");
    }
    yarp().write(helper, helper);
}

void BlackBoardWrapper::resetData()
{
    BlackBoardWrapper_resetData_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "void BlackBoardWrapper::resetData()");
    }
    yarp().write(helper, helper);
}

std::vector<std::string> BlackBoardWrapper::listTarget()
{
    BlackBoardWrapper_listTarget_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "std::vector<std::string> BlackBoardWrapper::listTarget()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BlackBoardWrapper_listTarget_helper::s_return_helper : std::vector<std::string>{};
}

// help method
std::vector<std::string> BlackBoardWrapper::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("getData");
        helpString.emplace_back("setData");
        helpString.emplace_back("clearData");
        helpString.emplace_back("clearAll");
        helpString.emplace_back("resetData");
        helpString.emplace_back("listTarget");
        helpString.emplace_back("help");
    } else {
        if (functionName == "getData") {
            helpString.emplace_back("yarp::os::Property getData(const std::string& target) ");
        }
        if (functionName == "setData") {
            helpString.emplace_back("bool setData(const std::string& target, const yarp::os::Property& datum) ");
        }
        if (functionName == "clearData") {
            helpString.emplace_back("void clearData(const std::string& target) ");
        }
        if (functionName == "clearAll") {
            helpString.emplace_back("void clearAll() ");
        }
        if (functionName == "resetData") {
            helpString.emplace_back("void resetData() ");
        }
        if (functionName == "listTarget") {
            helpString.emplace_back("std::vector<std::string> listTarget() ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool BlackBoardWrapper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "getData") {
            std::string target;
            if (!reader.readString(target)) {
                reader.fail();
                return false;
            }
            BlackBoardWrapper_getData_helper::s_return_helper = getData(target);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.write(BlackBoardWrapper_getData_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "setData") {
            std::string target;
            yarp::os::Property datum;
            if (!reader.readString(target)) {
                reader.fail();
                return false;
            }
            if (!reader.read(datum)) {
                reader.fail();
                return false;
            }
            BlackBoardWrapper_setData_helper::s_return_helper = setData(target, datum);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(BlackBoardWrapper_setData_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "clearData") {
            std::string target;
            if (!reader.readString(target)) {
                reader.fail();
                return false;
            }
            clearData(target);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "clearAll") {
            clearAll();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "resetData") {
            resetData();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(0)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "listTarget") {
            BlackBoardWrapper_listTarget_helper::s_return_helper = listTarget();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_STRING, static_cast<uint32_t>(BlackBoardWrapper_listTarget_helper::s_return_helper.size()))) {
                    return false;
                }
                for (const auto& _item5 : BlackBoardWrapper_listTarget_helper::s_return_helper) {
                    if (!writer.writeString(_item5)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}

} // namespace yarp
} // namespace BT_wrappers
