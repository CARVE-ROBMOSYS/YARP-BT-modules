/*
 * Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms of the
 * BSD-3-Clause license. See the accompanying LICENSE file for details.
 */

// Autogenerated by Thrift Compiler (0.12.0-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/BT_wrappers/BT_request.h>

#include <yarp/os/idl/WireTypes.h>

namespace yarp {
namespace BT_wrappers {

class BT_request_request_status_helper :
        public yarp::os::Portable
{
public:
    explicit BT_request_request_status_helper(const ActionID& target);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    ActionID m_target;

    thread_local static ReturnStatus s_return_helper;
};

thread_local ReturnStatus BT_request_request_status_helper::s_return_helper = {};

BT_request_request_status_helper::BT_request_request_status_helper(const ActionID& target) :
        m_target{target}
{
    s_return_helper = {};
}

bool BT_request_request_status_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(6)) {
        return false;
    }
    if (!writer.writeTag("request_status", 1, 2)) {
        return false;
    }
    if (!writer.write(m_target)) {
        return false;
    }
    return true;
}

bool BT_request_request_status_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    int32_t ecast0;
    ReturnStatusVocab cvrt1;
    if (!reader.readEnum(ecast0, cvrt1)) {
        reader.fail();
        return false;
    } else {
        s_return_helper = static_cast<ReturnStatus>(ecast0);
    }
    return true;
}

class BT_request_request_tick_helper :
        public yarp::os::Portable
{
public:
    explicit BT_request_request_tick_helper(const ActionID& target, const yarp::os::Property& params);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    ActionID m_target;
    yarp::os::Property m_params;

    thread_local static ReturnStatus s_return_helper;
};

thread_local ReturnStatus BT_request_request_tick_helper::s_return_helper = {};

BT_request_request_tick_helper::BT_request_request_tick_helper(const ActionID& target, const yarp::os::Property& params) :
        m_target{target},
        m_params{params}
{
    s_return_helper = {};
}

bool BT_request_request_tick_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(7)) {
        return false;
    }
    if (!writer.writeTag("request_tick", 1, 2)) {
        return false;
    }
    if (!writer.write(m_target)) {
        return false;
    }
    if (!writer.write(m_params)) {
        return false;
    }
    return true;
}

bool BT_request_request_tick_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    int32_t ecast2;
    ReturnStatusVocab cvrt3;
    if (!reader.readEnum(ecast2, cvrt3)) {
        reader.fail();
        return false;
    } else {
        s_return_helper = static_cast<ReturnStatus>(ecast2);
    }
    return true;
}

class BT_request_request_halt_helper :
        public yarp::os::Portable
{
public:
    explicit BT_request_request_halt_helper(const ActionID& target, const yarp::os::Property& params);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    ActionID m_target;
    yarp::os::Property m_params;

    thread_local static ReturnStatus s_return_helper;
};

thread_local ReturnStatus BT_request_request_halt_helper::s_return_helper = {};

BT_request_request_halt_helper::BT_request_request_halt_helper(const ActionID& target, const yarp::os::Property& params) :
        m_target{target},
        m_params{params}
{
    s_return_helper = {};
}

bool BT_request_request_halt_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(7)) {
        return false;
    }
    if (!writer.writeTag("request_halt", 1, 2)) {
        return false;
    }
    if (!writer.write(m_target)) {
        return false;
    }
    if (!writer.write(m_params)) {
        return false;
    }
    return true;
}

bool BT_request_request_halt_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    int32_t ecast4;
    ReturnStatusVocab cvrt5;
    if (!reader.readEnum(ecast4, cvrt5)) {
        reader.fail();
        return false;
    } else {
        s_return_helper = static_cast<ReturnStatus>(ecast4);
    }
    return true;
}

class BT_request_request_initialize_helper :
        public yarp::os::Portable
{
public:
    explicit BT_request_request_initialize_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool BT_request_request_initialize_helper::s_return_helper = {};

BT_request_request_initialize_helper::BT_request_request_initialize_helper()
{
    s_return_helper = {};
}

bool BT_request_request_initialize_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("request_initialize", 1, 2)) {
        return false;
    }
    return true;
}

bool BT_request_request_initialize_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class BT_request_request_terminate_helper :
        public yarp::os::Portable
{
public:
    explicit BT_request_request_terminate_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool BT_request_request_terminate_helper::s_return_helper = {};

BT_request_request_terminate_helper::BT_request_request_terminate_helper()
{
    s_return_helper = {};
}

bool BT_request_request_terminate_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("request_terminate", 1, 2)) {
        return false;
    }
    return true;
}

bool BT_request_request_terminate_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
BT_request::BT_request()
{
    yarp().setOwner(*this);
}

ReturnStatus BT_request::request_status(const ActionID& target)
{
    BT_request_request_status_helper helper{target};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "ReturnStatus BT_request::request_status(const ActionID& target)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BT_request_request_status_helper::s_return_helper : ReturnStatus{};
}

ReturnStatus BT_request::request_tick(const ActionID& target, const yarp::os::Property& params)
{
    BT_request_request_tick_helper helper{target, params};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "ReturnStatus BT_request::request_tick(const ActionID& target, const yarp::os::Property& params)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BT_request_request_tick_helper::s_return_helper : ReturnStatus{};
}

ReturnStatus BT_request::request_halt(const ActionID& target, const yarp::os::Property& params)
{
    BT_request_request_halt_helper helper{target, params};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "ReturnStatus BT_request::request_halt(const ActionID& target, const yarp::os::Property& params)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BT_request_request_halt_helper::s_return_helper : ReturnStatus{};
}

bool BT_request::request_initialize()
{
    BT_request_request_initialize_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool BT_request::request_initialize()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BT_request_request_initialize_helper::s_return_helper : bool{};
}

bool BT_request::request_terminate()
{
    BT_request_request_terminate_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool BT_request::request_terminate()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? BT_request_request_terminate_helper::s_return_helper : bool{};
}

// help method
std::vector<std::string> BT_request::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("request_status");
        helpString.emplace_back("request_tick");
        helpString.emplace_back("request_halt");
        helpString.emplace_back("request_initialize");
        helpString.emplace_back("request_terminate");
        helpString.emplace_back("help");
    } else {
        if (functionName == "request_status") {
            helpString.emplace_back("ReturnStatus request_status(const ActionID& target) ");
        }
        if (functionName == "request_tick") {
            helpString.emplace_back("ReturnStatus request_tick(const ActionID& target, const yarp::os::Property& params = {  }) ");
        }
        if (functionName == "request_halt") {
            helpString.emplace_back("ReturnStatus request_halt(const ActionID& target, const yarp::os::Property& params = {  }) ");
        }
        if (functionName == "request_initialize") {
            helpString.emplace_back("bool request_initialize() ");
        }
        if (functionName == "request_terminate") {
            helpString.emplace_back("bool request_terminate() ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool BT_request::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "request_status") {
            ActionID target;
            if (!reader.read(target)) {
                reader.fail();
                return false;
            }
            BT_request_request_status_helper::s_return_helper = request_status(target);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeI32(static_cast<int32_t>(BT_request_request_status_helper::s_return_helper))) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "request_tick") {
            ActionID target;
            yarp::os::Property params;
            if (!reader.read(target)) {
                reader.fail();
                return false;
            }
            if (!reader.read(params)) {
                params = {  };
            }
            BT_request_request_tick_helper::s_return_helper = request_tick(target, params);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeI32(static_cast<int32_t>(BT_request_request_tick_helper::s_return_helper))) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "request_halt") {
            ActionID target;
            yarp::os::Property params;
            if (!reader.read(target)) {
                reader.fail();
                return false;
            }
            if (!reader.read(params)) {
                params = {  };
            }
            BT_request_request_halt_helper::s_return_helper = request_halt(target, params);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeI32(static_cast<int32_t>(BT_request_request_halt_helper::s_return_helper))) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "request_initialize") {
            BT_request_request_initialize_helper::s_return_helper = request_initialize();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(BT_request_request_initialize_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "request_terminate") {
            BT_request_request_terminate_helper::s_return_helper = request_terminate();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(BT_request_request_terminate_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}

} // namespace yarp
} // namespace BT_wrappers
